# This is a basic workflow to help you get started with Actions

name: ali-docker
on:
  workflow_dispatch:
    inputs:
      dockerhub_image:
        description: 'Docker Hub 镜像名称 (全名，包括用户名/组织名和镜像名，如 mysql 或 gitea/act_runner:1.2.3)'
        required: true
        type: string
        default: 'hello-world' # 默认值改为不带tag，自动处理latest

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # 拉取 Docker Hub 上的镜像并获取实际名称和标签
      - name: Pull image from Docker Hub and Get Actual Image Name
        id: pull_image # 给这个步骤一个ID，方便引用其输出
        run: |
          ORIGINAL_INPUT_IMAGE="${{ github.event.inputs.dockerhub_image }}"
          echo "将要拉取镜像: ${ORIGINAL_INPUT_IMAGE}"
          docker pull ${ORIGINAL_INPUT_IMAGE}
          
          # 获取实际拉取到的镜像ID，因为一个镜像可能对应多个Tag
          IMAGE_ID=$(docker images --format "{{.ID}}" "${ORIGINAL_INPUT_IMAGE}" | head -n 1)
          
          # 根据镜像ID查找其完整的 REPOSITORY:TAG 名称
          # 使用 grep -w 确保精确匹配，防止部分匹配导致错误
          # awk '{print $1":"$2}' 提取 REPOSITORY:TAG
          ACTUAL_OLD_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -w "${IMAGE_ID}" | head -n 1)

          if [ -z "${ACTUAL_OLD_IMAGE}" ]; then
              echo "错误：未能获取到实际拉取的镜像名称。请检查输入是否正确或镜像是否存在。"
              exit 1
          fi

          echo "实际拉取的原始镜像名称为: ${ACTUAL_OLD_IMAGE}"
          echo "ACTUAL_OLD_IMAGE=${ACTUAL_OLD_IMAGE}" >> $GITHUB_ENV # 将实际镜像名称设为环境变量
          docker images # 打印所有镜像，方便调试
          
      # 给镜像打上新标签
      - name: Retag Docker image
        run: |
          OLD_IMAGE="${{ env.ACTUAL_OLD_IMAGE }}" # 使用上一步骤获取的实际镜像名称
          
          # 从 ACTUAL_OLD_IMAGE 中分离出镜像名和标签
          # 使用 rev | cut | rev 技巧来处理可能包含多个冒号的私有仓库镜像名
          IMAGE_TAG=$(echo "${OLD_IMAGE}" | rev | cut -d':' -f1 | rev) # 获取最后一个冒号后的部分作为标签
          IMAGE_FULL_NAME=$(echo "${OLD_IMAGE}" | sed "s/:${IMAGE_TAG}$//") # 获取标签之前的完整镜像名

          echo "提取的镜像完整名称 (不含tag): ${IMAGE_FULL_NAME}"
          echo "提取的镜像标签: ${IMAGE_TAG}"
          
          # 判断是官方镜像还是第三方镜像
          if [[ "${IMAGE_FULL_NAME}" == * "/" * ]]; then
            # 第三方镜像，例如 gitea/act_runner
            # 将斜杠替换为下划线
            MIRROR_IMAGE_NAME=$(echo ${IMAGE_FULL_NAME} | sed 's/\//_/g')
            NEW_IMAGE="registry.cn-shanghai.aliyuncs.com/${{ vars.ALIYUN_NAMESPACE3 }}/${MIRROR_IMAGE_NAME}:${IMAGE_TAG}"
          else
            # 官方镜像，例如 mysql
            NEW_IMAGE="registry.cn-shanghai.aliyuncs.com/${{ vars.ALIYUN_NAMESPACE3 }}/${IMAGE_FULL_NAME}:${IMAGE_TAG}"
          fi

          docker tag ${OLD_IMAGE} ${NEW_IMAGE}
          echo "原始镜像: ${OLD_IMAGE}"
          echo "新镜像: ${NEW_IMAGE}"
          echo "NEW_IMAGE=${NEW_IMAGE}" >> $GITHUB_ENV # 将NEW_IMAGE设置为环境变量，供后续步骤使用
          docker images
          

      # 推送
      - name: Login to Aliyun Docker Registry and Push Image
        run: |
          echo "${{ secrets.ALIYUN_PASSWORD }}" | docker login -u "${{ secrets.ALIYUN_USERNAME }}" registry.cn-shanghai.aliyuncs.com --password-stdin
          echo "正在推送镜像: ${{ env.NEW_IMAGE }}"
          docker push ${{ env.NEW_IMAGE }}