# This is a basic workflow to help you get started with Actions

name: ali-docker
on:
  workflow_dispatch:
    inputs:
      dockerhub_image:
        description: 'Docker Hub 镜像名称 (全名，包括用户名/组织名和镜像名，如 mysql 或 gitea/act_runner:1.2.3)'
        required: true
        type: string
        default: 'hello-world' # 默认值改为不带tag，自动处理latest

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # 拉取 Docker Hub 上的镜像并获取实际名称和标签
      - name: Pull image from Docker Hub and Get Actual Image Name
        id: pull_image # 给这个步骤一个ID，方便引用其输出
        run: |
          ORIGINAL_INPUT_IMAGE="${{ github.event.inputs.dockerhub_image }}"
          echo "将要拉取镜像: ${ORIGINAL_INPUT_IMAGE}"
          
          # 执行 docker pull 并捕获输出
          PULL_OUTPUT=$(docker pull ${ORIGINAL_INPUT_IMAGE} 2>&1)
          echo "${PULL_OUTPUT}" # 打印完整的拉取输出到日志

          # 从拉取输出的最后一行尝试提取实际的 REPOSITORY:TAG
          # 针对 "docker.io/library/hello-world:latest" 这种格式进行提取
          ACTUAL_OLD_IMAGE=$(echo "${PULL_OUTPUT}" | tail -n 1 | awk '{print $1}')
          echo $ACTUAL_OLD_IMAGE 

          if [ -z "${ACTUAL_OLD_IMAGE}" ]; then
              echo "错误：未能获取到实际拉取的镜像名称。请检查输入是否正确或镜像是否存在。"
              exit 1
          fi

          echo "实际拉取的原始镜像名称为: ${ACTUAL_OLD_IMAGE}"
          echo "ACTUAL_OLD_IMAGE=${ACTUAL_OLD_IMAGE}" >> $GITHUB_ENV # 将实际镜像名称设为环境变量
          docker images # 打印所有镜像，方便调试
          
      # 给镜像打上新标签
      - name: Retag Docker image
        run: |
          OLD_IMAGE="${{ env.ACTUAL_OLD_IMAGE }}" # 使用上一步骤获取的实际镜像名称
          
          IMAGE_TAG=$(echo "${OLD_IMAGE}" | rev | cut -d':' -f1 | rev)
          IMAGE_FULL_NAME=$(echo "${OLD_IMAGE}" | sed "s/:${IMAGE_TAG}$//")

          echo "提取的镜像完整名称 (不含tag): ${IMAGE_FULL_NAME}"
          echo "提取的镜像标签: ${IMAGE_TAG}"

          # --- 新增的标准化逻辑 ---
          PROCESSED_IMAGE_NAME="${IMAGE_FULL_NAME}"

          # 1. 移除 'docker.io/library/' 前缀
          if [[ "${PROCESSED_IMAGE_NAME}" == "docker.io/library/"* ]]; then
            PROCESSED_IMAGE_NAME="${PROCESSED_IMAGE_NAME#docker.io/library/}"
            echo "移除 'docker.io/library/' 前缀后: ${PROCESSED_IMAGE_NAME}"
          fi

          # 2. 移除 'docker.io/' 前缀，并将斜杠替换为下划线
          if [[ "${PROCESSED_IMAGE_NAME}" == "docker.io/"* ]]; then
            PROCESSED_IMAGE_NAME="${PROCESSED_IMAGE_NAME#docker.io/}"
            PROCESSED_IMAGE_NAME=$(echo "${PROCESSED_IMAGE_NAME}" | sed 's/\//_/g')
            echo "移除 'docker.io/' 并替换斜杠后: ${PROCESSED_IMAGE_NAME}"
          fi
          # --- 标准化逻辑结束 ---
          
          # 根据标准化后的名称构建新的镜像路径
          NEW_IMAGE="registry.cn-shanghai.aliyuncs.com/${{ vars.ALIYUN_NAMESPACE3 }}/${PROCESSED_IMAGE_NAME}:${IMAGE_TAG}"

          docker tag ${OLD_IMAGE} ${NEW_IMAGE}
          echo "原始镜像: ${OLD_IMAGE}"
          echo "新镜像: ${NEW_IMAGE}"
          echo "NEW_IMAGE=${NEW_IMAGE}" >> $GITHUB_ENV
          docker images
          

      # 推送
      - name: Login to Aliyun Docker Registry and Push Image
        run: |
          echo "${{ secrets.ALIYUN_PASSWORD }}" | docker login -u "${{ secrets.ALIYUN_USERNAME }}" registry.cn-shanghai.aliyuncs.com --password-stdin
          echo "正在推送镜像: ${{ env.NEW_IMAGE }}"
          docker push ${{ env.NEW_IMAGE }}